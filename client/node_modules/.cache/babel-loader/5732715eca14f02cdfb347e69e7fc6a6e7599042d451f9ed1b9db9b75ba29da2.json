{"ast":null,"code":"var _jsxFileName = \"/Users/rzeinalov/Developer/shell-game/client/src/ShellGameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\n\n/**\n * Props:\n *  - ballPosition: which cup (0..2) actually hides the ball\n *  - disabledCups: array of bools [cup0Disabled, cup1Disabled, cup2Disabled]\n *  - gameOver: bool\n *  - foundBall: bool (true if user guessed it)\n *  - liftedCup: number or null (which cup is physically lifted)\n *  - onCupClick(index) => void\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ShellGameCanvas({\n  ballPosition,\n  disabledCups,\n  gameOver,\n  foundBall,\n  liftedCup,\n  onCupClick\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const width = 600;\n  const height = 300;\n\n  // We'll track each cup's color and current/target X positions for animation.\n  // They all share the same Y = 180\n  // Cup #0 => orange, #1 => red, #2 => gold\n  const [cups, setCups] = useState([{\n    curX: 100,\n    targetX: 100,\n    color: 'orange'\n  }, {\n    curX: 300,\n    targetX: 300,\n    color: 'red'\n  }, {\n    curX: 500,\n    targetX: 500,\n    color: 'gold'\n  }]);\n\n  // How many times we shuffle (swap) at the start\n  const shuffleTotal = 3;\n  // Track how many shuffle steps are left\n  const [shuffleStepsLeft, setShuffleStepsLeft] = useState(shuffleTotal);\n  // Are we currently shuffling?\n  const [shuffling, setShuffling] = useState(true);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Load a background image if desired\n    const bgImage = new Image();\n    bgImage.src = '/background.jpg';\n    let animationFrameId;\n    function animate() {\n      updatePositions();\n      drawScene(ctx, bgImage);\n      animationFrameId = requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Start the initial shuffle\n    doShuffle();\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n    // eslint-disable-next-line\n  }, []);\n  function doShuffle() {\n    if (shuffleStepsLeft <= 0) {\n      setShuffling(false);\n      return;\n    }\n\n    // Current arrangement\n    const oldPositions = cups.map(c => c.targetX);\n\n    // Generate a random permutation of the X positions [100, 300, 500]\n    let positions;\n    let isSame;\n    let tries = 0;\n    do {\n      positions = [100, 300, 500];\n      for (let i = positions.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [positions[i], positions[j]] = [positions[j], positions[i]];\n      }\n      // Compare with old arrangement\n      isSame = positions.every((p, idx) => p === oldPositions[idx]);\n      tries++;\n    } while (isSame && tries < 10); // ensure new arrangement differs\n\n    // Update each cup's targetX\n    setCups(prev => prev.map((cup, i) => ({\n      ...cup,\n      targetX: positions[i]\n    })));\n  }\n  function updatePositions() {\n    setCups(prevCups => {\n      let allArrived = true;\n      const newCups = prevCups.map(cup => {\n        // fraction of distance to move each frame\n        const speed = 0.08; // a bit slower so you can see it\n        const dx = cup.targetX - cup.curX;\n        if (Math.abs(dx) < 0.5) {\n          return {\n            ...cup,\n            curX: cup.targetX\n          };\n        } else {\n          allArrived = false;\n          return {\n            ...cup,\n            curX: cup.curX + dx * speed\n          };\n        }\n      });\n\n      // If all cups arrived, do next shuffle\n      if (allArrived && shuffling && shuffleStepsLeft > 0) {\n        setShuffleStepsLeft(s => s - 1);\n        setTimeout(() => {\n          doShuffle();\n        }, 400); // small pause between shuffles\n      }\n      return newCups;\n    });\n  }\n  function drawScene(ctx, bgImage) {\n    ctx.clearRect(0, 0, width, height);\n\n    // Background\n    if (bgImage.complete && bgImage.naturalWidth > 0) {\n      ctx.drawImage(bgImage, 0, 0, width, height);\n    } else {\n      ctx.fillStyle = '#a5d8ff';\n      ctx.fillRect(0, 0, width, height);\n    }\n\n    // Draw cups\n    cups.forEach((cup, i) => {\n      const isDisabled = disabledCups[i];\n      const isLifted = i === liftedCup; // lift this cup if it's the winning guess\n      drawCup3D(ctx, cup.curX, 180, cup.color, isDisabled, isLifted);\n    });\n\n    // If user found the ball or game is over => reveal ball\n    if ((foundBall || gameOver) && ballPosition !== null) {\n      const bx = cups[ballPosition].curX;\n      drawBall3D(ctx, bx, 180, liftedCup === ballPosition);\n    }\n  }\n  function drawCup3D(ctx, x, y, cupColor, disabled, lifted) {\n    ctx.save();\n\n    // If lifted, move the cup up by ~20 px\n    const liftOffset = lifted ? 20 : 0;\n    const cupY = y - liftOffset;\n\n    // Shadow right under the cup (slightly offset if lifted)\n    ctx.fillStyle = 'rgba(0,0,0,0.3)';\n    ctx.beginPath();\n    ctx.ellipse(x, y + 5, 30, 8, 0, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Cup color gradient\n    let topColor = cupColor;\n    let bottomColor = cupColor;\n    if (disabled) {\n      topColor = '#ddd';\n      bottomColor = '#bbb';\n    } else {\n      if (cupColor === 'orange') {\n        topColor = '#FFA500';\n        bottomColor = '#FF8C00';\n      } else if (cupColor === 'red') {\n        topColor = '#ff6666';\n        bottomColor = '#ff0000';\n      } else if (cupColor === 'gold') {\n        topColor = '#FFD700';\n        bottomColor = '#FFC107';\n      }\n    }\n    const grad = ctx.createLinearGradient(x, cupY - 60, x, cupY);\n    grad.addColorStop(0, topColor);\n    grad.addColorStop(1, bottomColor);\n    ctx.fillStyle = grad;\n\n    // Body\n    ctx.beginPath();\n    ctx.moveTo(x - 20, cupY - 60);\n    ctx.lineTo(x - 30, cupY);\n    ctx.lineTo(x + 30, cupY);\n    ctx.lineTo(x + 20, cupY - 60);\n    ctx.closePath();\n    ctx.fill();\n\n    // Top ellipse\n    ctx.beginPath();\n    ctx.ellipse(x, cupY - 60, 20, 8, 0, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Bottom ellipse (rim)\n    ctx.beginPath();\n    ctx.ellipse(x, cupY, 30, 10, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.restore();\n  }\n  function drawBall3D(ctx, x, y, cupLifted) {\n    ctx.save();\n\n    // If the cup is lifted, we can see the ball on the ground\n    // We'll keep the ball at y+5, but the cup is 20 px up, so visually it's \"under\" the cup\n    // The shadow is right under the ball\n    ctx.fillStyle = 'rgba(0,0,0,0.2)';\n    ctx.beginPath();\n    ctx.ellipse(x, y + 15, 14, 5, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    const grad = ctx.createRadialGradient(x - 5, y - 5, 4, x, y, 14);\n    grad.addColorStop(0, '#ffffaa');\n    grad.addColorStop(1, 'yellow');\n    ctx.fillStyle = grad;\n    ctx.beginPath();\n    ctx.arc(x, y + 5, 14, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.restore();\n  }\n  function handleCanvasClick(e) {\n    if (!canvasRef.current) return;\n    // If you want to block clicks during shuffle:\n    // if (shuffling) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n\n    // Approx bounding circles at (cups[i].curX, 180), radius ~ 40\n    cups.forEach((cup, index) => {\n      const dx = clickX - cup.curX;\n      const dy = clickY - 180;\n      const dist = Math.sqrt(dx * dx + dy * dy);\n      if (dist < 40) {\n        onCupClick(index);\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height,\n    onClick: handleCanvasClick,\n    style: {\n      border: '1px solid #ccc',\n      display: 'block',\n      margin: '0 auto'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_s(ShellGameCanvas, \"M0TOjwQik7zwy2jJ3ETRz6GtPmw=\");\n_c = ShellGameCanvas;\nexport default ShellGameCanvas;\nvar _c;\n$RefreshReg$(_c, \"ShellGameCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","ShellGameCanvas","ballPosition","disabledCups","gameOver","foundBall","liftedCup","onCupClick","_s","canvasRef","width","height","cups","setCups","curX","targetX","color","shuffleTotal","shuffleStepsLeft","setShuffleStepsLeft","shuffling","setShuffling","canvas","current","ctx","getContext","bgImage","Image","src","animationFrameId","animate","updatePositions","drawScene","requestAnimationFrame","doShuffle","cancelAnimationFrame","oldPositions","map","c","positions","isSame","tries","i","length","j","Math","floor","random","every","p","idx","prev","cup","prevCups","allArrived","newCups","speed","dx","abs","s","setTimeout","clearRect","complete","naturalWidth","drawImage","fillStyle","fillRect","forEach","isDisabled","isLifted","drawCup3D","bx","drawBall3D","x","y","cupColor","disabled","lifted","save","liftOffset","cupY","beginPath","ellipse","PI","fill","topColor","bottomColor","grad","createLinearGradient","addColorStop","moveTo","lineTo","closePath","restore","cupLifted","createRadialGradient","arc","handleCanvasClick","e","rect","getBoundingClientRect","clickX","clientX","left","clickY","clientY","top","index","dy","dist","sqrt","ref","onClick","style","border","display","margin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rzeinalov/Developer/shell-game/client/src/ShellGameCanvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\n/**\n * Props:\n *  - ballPosition: which cup (0..2) actually hides the ball\n *  - disabledCups: array of bools [cup0Disabled, cup1Disabled, cup2Disabled]\n *  - gameOver: bool\n *  - foundBall: bool (true if user guessed it)\n *  - liftedCup: number or null (which cup is physically lifted)\n *  - onCupClick(index) => void\n */\nfunction ShellGameCanvas({\n  ballPosition,\n  disabledCups,\n  gameOver,\n  foundBall,\n  liftedCup,\n  onCupClick\n}) {\n  const canvasRef = useRef(null);\n\n  const width = 600;\n  const height = 300;\n\n  // We'll track each cup's color and current/target X positions for animation.\n  // They all share the same Y = 180\n  // Cup #0 => orange, #1 => red, #2 => gold\n  const [cups, setCups] = useState([\n    { curX: 100, targetX: 100, color: 'orange' },\n    { curX: 300, targetX: 300, color: 'red' },\n    { curX: 500, targetX: 500, color: 'gold' }\n  ]);\n\n  // How many times we shuffle (swap) at the start\n  const shuffleTotal = 3;\n  // Track how many shuffle steps are left\n  const [shuffleStepsLeft, setShuffleStepsLeft] = useState(shuffleTotal);\n  // Are we currently shuffling?\n  const [shuffling, setShuffling] = useState(true);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Load a background image if desired\n    const bgImage = new Image();\n    bgImage.src = '/background.jpg';\n\n    let animationFrameId;\n\n    function animate() {\n      updatePositions();\n      drawScene(ctx, bgImage);\n      animationFrameId = requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Start the initial shuffle\n    doShuffle();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  function doShuffle() {\n    if (shuffleStepsLeft <= 0) {\n      setShuffling(false);\n      return;\n    }\n\n    // Current arrangement\n    const oldPositions = cups.map(c => c.targetX);\n\n    // Generate a random permutation of the X positions [100, 300, 500]\n    let positions;\n    let isSame;\n    let tries = 0;\n    do {\n      positions = [100, 300, 500];\n      for (let i = positions.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [positions[i], positions[j]] = [positions[j], positions[i]];\n      }\n      // Compare with old arrangement\n      isSame = positions.every((p, idx) => p === oldPositions[idx]);\n      tries++;\n    } while (isSame && tries < 10); // ensure new arrangement differs\n\n    // Update each cup's targetX\n    setCups(prev => prev.map((cup, i) => ({\n      ...cup,\n      targetX: positions[i]\n    })));\n  }\n\n  function updatePositions() {\n    setCups(prevCups => {\n      let allArrived = true;\n      const newCups = prevCups.map(cup => {\n        // fraction of distance to move each frame\n        const speed = 0.08; // a bit slower so you can see it\n        const dx = cup.targetX - cup.curX;\n        if (Math.abs(dx) < 0.5) {\n          return { ...cup, curX: cup.targetX };\n        } else {\n          allArrived = false;\n          return { ...cup, curX: cup.curX + dx * speed };\n        }\n      });\n\n      // If all cups arrived, do next shuffle\n      if (allArrived && shuffling && shuffleStepsLeft > 0) {\n        setShuffleStepsLeft(s => s - 1);\n        setTimeout(() => {\n          doShuffle();\n        }, 400); // small pause between shuffles\n      }\n\n      return newCups;\n    });\n  }\n\n  function drawScene(ctx, bgImage) {\n    ctx.clearRect(0, 0, width, height);\n\n    // Background\n    if (bgImage.complete && bgImage.naturalWidth > 0) {\n      ctx.drawImage(bgImage, 0, 0, width, height);\n    } else {\n      ctx.fillStyle = '#a5d8ff';\n      ctx.fillRect(0, 0, width, height);\n    }\n\n    // Draw cups\n    cups.forEach((cup, i) => {\n      const isDisabled = disabledCups[i];\n      const isLifted = (i === liftedCup); // lift this cup if it's the winning guess\n      drawCup3D(ctx, cup.curX, 180, cup.color, isDisabled, isLifted);\n    });\n\n    // If user found the ball or game is over => reveal ball\n    if ((foundBall || gameOver) && ballPosition !== null) {\n      const bx = cups[ballPosition].curX;\n      drawBall3D(ctx, bx, 180, liftedCup === ballPosition);\n    }\n  }\n\n  function drawCup3D(ctx, x, y, cupColor, disabled, lifted) {\n    ctx.save();\n\n    // If lifted, move the cup up by ~20 px\n    const liftOffset = lifted ? 20 : 0;\n    const cupY = y - liftOffset;\n\n    // Shadow right under the cup (slightly offset if lifted)\n    ctx.fillStyle = 'rgba(0,0,0,0.3)';\n    ctx.beginPath();\n    ctx.ellipse(x, y + 5, 30, 8, 0, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Cup color gradient\n    let topColor = cupColor;\n    let bottomColor = cupColor;\n    if (disabled) {\n      topColor = '#ddd';\n      bottomColor = '#bbb';\n    } else {\n      if (cupColor === 'orange') {\n        topColor = '#FFA500';\n        bottomColor = '#FF8C00';\n      } else if (cupColor === 'red') {\n        topColor = '#ff6666';\n        bottomColor = '#ff0000';\n      } else if (cupColor === 'gold') {\n        topColor = '#FFD700';\n        bottomColor = '#FFC107';\n      }\n    }\n\n    const grad = ctx.createLinearGradient(x, cupY - 60, x, cupY);\n    grad.addColorStop(0, topColor);\n    grad.addColorStop(1, bottomColor);\n    ctx.fillStyle = grad;\n\n    // Body\n    ctx.beginPath();\n    ctx.moveTo(x - 20, cupY - 60);\n    ctx.lineTo(x - 30, cupY);\n    ctx.lineTo(x + 30, cupY);\n    ctx.lineTo(x + 20, cupY - 60);\n    ctx.closePath();\n    ctx.fill();\n\n    // Top ellipse\n    ctx.beginPath();\n    ctx.ellipse(x, cupY - 60, 20, 8, 0, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Bottom ellipse (rim)\n    ctx.beginPath();\n    ctx.ellipse(x, cupY, 30, 10, 0, 0, 2 * Math.PI);\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  function drawBall3D(ctx, x, y, cupLifted) {\n    ctx.save();\n\n    // If the cup is lifted, we can see the ball on the ground\n    // We'll keep the ball at y+5, but the cup is 20 px up, so visually it's \"under\" the cup\n    // The shadow is right under the ball\n    ctx.fillStyle = 'rgba(0,0,0,0.2)';\n    ctx.beginPath();\n    ctx.ellipse(x, y + 15, 14, 5, 0, 0, 2 * Math.PI);\n    ctx.fill();\n\n    const grad = ctx.createRadialGradient(x - 5, y - 5, 4, x, y, 14);\n    grad.addColorStop(0, '#ffffaa');\n    grad.addColorStop(1, 'yellow');\n\n    ctx.fillStyle = grad;\n    ctx.beginPath();\n    ctx.arc(x, y + 5, 14, 0, 2 * Math.PI);\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  function handleCanvasClick(e) {\n    if (!canvasRef.current) return;\n    // If you want to block clicks during shuffle:\n    // if (shuffling) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n\n    // Approx bounding circles at (cups[i].curX, 180), radius ~ 40\n    cups.forEach((cup, index) => {\n      const dx = clickX - cup.curX;\n      const dy = clickY - 180;\n      const dist = Math.sqrt(dx * dx + dy * dy);\n      if (dist < 40) {\n        onCupClick(index);\n      }\n    });\n  }\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={width}\n      height={height}\n      onClick={handleCanvasClick}\n      style={{ border: '1px solid #ccc', display: 'block', margin: '0 auto' }}\n    />\n  );\n}\n\nexport default ShellGameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}